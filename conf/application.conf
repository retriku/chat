# https://www.playframework.com/documentation/latest/Configuration
play.http.secret.key = foo

play.application.loader = modules.MyApplicationLoader

play.engine-io {

  # The router name. This tells play-engine.io to use a router with this name,
  # which is configured below.
  router-name = "engine.io-router"
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {

    # Enable clustering
    provider = "cluster"

    deployment {

      # This actor path matches the configured play.engine-io.router-name above.
      "/engine.io-router" {

        # We use a consistent hashing group.
        router = consistent-hashing-group

        # This is the default path for the engine.io manager actor.
        # If you've changed that (via the play.engine-io.actor-name setting),
        # then this must be updated to match.
        routees.paths = ["/user/engine.io"]

        cluster {
          seed-nodes {
            0 = "akka.tcp://application@127.0.0.1:2551"
          }
          enabled = on
          allow-local-routees = on
        }
      }
    }

    # Chat event serializer config
    serializers.chat-event = "chat.ChatEventSerializer"
    serialization-bindings {
      "chat.model.NewChatMessage" = chat-event
      "chat.model.UpdatedChatMessage" = chat-event
      "chat.model.JoinRoom" = chat-event
      "chat.model.LeaveRoom" = chat-event
    }
    serialization-identifiers {
      # "chat".hashCode
      "chat.ChatEventSerializer" = 3052376
    }
  }

  # Remove configuration. The port number wil be provided by a system property.
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
    }
  }

  persistence {
    journal {
      plugin = "inmemory-journal"
      inmem {
        event-adapters {
          tagging = "chat.store.ChatRoomEventsEventAdapter"
        }

        event-adapter-bindings {
          "chat.model.ChatRoomEvent" = tagging
        }
      }
    }
    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
    }
  }
}

inmemory-read-journal {
  # Absolute path to the write journal plugin configuration section to get the event adapters from
  write-plugin = "inmemory-journal"

  # there are two modes; sequence or uuid. If set to "sequence" and NoOffset will be requested, then
  # the query will return Sequence offset types. If set to "uuid" and NoOffset will be requested, then
  # the query will return TimeBasedUUID offset types. When the query is called with Sequence then
  # the query will return Sequence offset types and if the query is called with TimeBasedUUID types then
  # the query will return TimeBasedUUID offset types.
  offset-mode = "sequence"

  # ask timeout on Futures
  ask-timeout = "10s"

  # New events are retrieved (polled) with this interval.
  refresh-interval = "100ms"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "100"
}